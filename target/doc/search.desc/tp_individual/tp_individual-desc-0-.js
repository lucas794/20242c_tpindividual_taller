searchState.loadedDescShard("tp_individual", 0, "representation of the condition that can be used on a query\nFor now we only support int &amp; string.\nrepresentation of the type of value can be used for …\ngiven a condition, it will evaluate if the condition is met\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ngiven a condition as STR it will return if the condition …\nSelect representation for the SQL query\nGiven a table, columns, conditions and sorting method …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA valid select query contains SELECT and FROM AND ends …\nA valid INSERT query contains INSERT INTO and VALUES AND …\nA valid UPDATE query contains UPDATE and SET AND ends with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGiven a SQL Consult, we extract the conditions as string. …\nGiven a SQL Consult, we extract the columns as vector of …\nGiven a query, we extract the ORDER BY columns and if they …\nGiven a SQL Consult, we extract the table name as string. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven a parsed ORDER by clause (previously filtered with …\nReturns the argument unchanged.\nGet the file name of the table\nCalls <code>U::from(self)</code>.\ngiven a columns and values as Vec of String It returns the …\ngiven the columns of the table, and the conditions of the …\nFunction that handles the resolve of the update query …")