searchState.loadedDescShard("tp_individual", 0, "representation of the condition that can be used on a query\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ngiven a condition as STR it will return if the condition …\nRepresentation of a value in a condition.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStruct to handle the DELETE query.\nExecute the delete query\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA valid DELETE query contains DELETE and FROM AND ends …\nStruct to handle the INSERT query.\nExecute the insert query\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA valid INSERT query contains INSERT INTO and VALUES AND …\nGiven a table, columns, conditions and sorting method\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA valid select query contains SELECT and FROM AND ends …\nExecute the update query\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA valid UPDATE query contains UPDATE and SET AND ends with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGiven a SQL Consult, we extract the conditions as string.\nGiven a SQL Consult, we extract the columns and values for …\nThis one is tricky.\nGiven a SQL Consult, we extract the columns as vector of …\nGiven a query, we extract the ORDER BY columns and if they …\nGiven a SQL Consult, we extract the table name as string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGiven a parsed ORDER by clause (previously filtered with …\nRepresents the SQL command type\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFolderTables is a struct that contains a HashMap\nReturns the argument unchanged.\nGiven a key (Table name), returns the path to the table\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the directory where the file is located Example: …\nGet the file name of the table\nFunction that handles the insert query\nCalls <code>U::from(self)</code>.\nThe approach in this work is to avoid reading the whole …\ngiven a columns and values as Vec of String\ngiven the columns of table, conditions as str and a …\nFunction that handles the resolve of the update query\nSortMethod is a struct that holds the information about …\nReturns the argument unchanged.\nReturns the name of the column to sort by.\nCalls <code>U::from(self)</code>.\nReturns a boolean that determines if the sort should be …")